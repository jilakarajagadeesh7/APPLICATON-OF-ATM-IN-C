#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define PIN_LENGTH 4
#define MAX_ATTEMPTS 3
#define MAX_DEPOSIT_AMOUNT 100000

// Structure to represent an ATM transaction
typedef struct Transaction {
    char* name;
    void (*transactionFunc)();
    struct Transaction* next;
} Transaction;

// Function prototypes for transaction functions
void cashWithdrawal();
void cashDeposit();
void fundTransfer();
void accountServices();
void exitATM();

// Function to create a new transaction node
Transaction* createTransaction(char* name, void (*transactionFunc)()) {
    Transaction* newTransaction = (Transaction*)malloc(sizeof(Transaction));
    newTransaction->name = name;
    newTransaction->transactionFunc = transactionFunc;
    newTransaction->next = NULL;
    return newTransaction;
}

// Function to add a transaction to the list
void addTransaction(Transaction** head, char* name, void (*transactionFunc)()) {
    Transaction* newTransaction = createTransaction(name, transactionFunc);
    if (*head == NULL) {
        *head = newTransaction;
    } else {
        Transaction* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTransaction;
    }
}

// Function to display the available transactions
void displayTransactions(Transaction* head) {
    Transaction* current = head;
    int count = 1;
    printf("Available Transactions:\n");
    while (current != NULL) {
        printf("%d. %s\n", count, current->name);
        current = current->next;
        count++;
    }
    printf("\n");
}

// Transaction functions
void cashWithdrawal() {
    printf("Performing cash withdrawal...\n");

    // Prompt for withdrawal amount
    int amount;
    printf("Select withdrawal amount:\n");
    printf("1. Rs 100\n");
    printf("2. Rs 200\n");
    printf("3. Rs 500\n");
    printf("4. Rs 2000\n");
    printf("Enter your choice: ");
    scanf("%d", &amount);

    switch (amount) {
        case 1:
            printf("Withdrawing Rs 100...\n");
            // Add code to handle withdrawal of Rs 100
            break;
        case 2:
            printf("Withdrawing Rs 200...\n");
            // Add code to handle withdrawal of Rs 200
            break;
        case 3:
            printf("Withdrawing Rs 500...\n");
            // Add code to handle withdrawal of Rs 500
            break;
        case 4:
            printf("Withdrawing Rs 2000...\n");
            // Add code to handle withdrawal of Rs 2000
            break;
        default:
            printf("Invalid choice. No withdrawal made.\n");
            break;
    }
}

void cashDeposit() {
    printf("Performing cash deposit...\n");

    // Prompt for deposit amount
    int amount;
    printf("Enter the deposit amount (in Rs): ");
    scanf("%d", &amount);

    if (amount > 0 && amount <= MAX_DEPOSIT_AMOUNT) {
        printf("Depositing Rs %d...\n", amount);
        // Add code to handle cash deposit of the given amount
    } else {
        printf("Invalid deposit amount. Please enter a value between 1 and %d (in Rs).\n", MAX_DEPOSIT_AMOUNT);
    }
}

void fundTransfer() {
    printf("Performing fund transfer...\n");
    // Add code to handle fund transfer
}

void accountServices() {
    printf("Performing account services...\n");

    // Display account services options
    int option;
    printf("Select an option:\n");
    printf("1. Balance Inquiry\n");
    printf("2. Mini Statement\n");
    printf("3. PIN Change\n");
    printf("Enter your choice: ");
    scanf("%d", &option);

    switch (option) {
        case 1:
        printf("Performing balance inquiry...\n");
            break;
        case 2:
            printf("Performing mini statement...\n");
            // Add code to handle mini statement
            break;
        case 3:
            printf("Performing PIN change...\n");
            // Add code to handle PIN change
            break;
        default:
            printf("Invalid option.\n");
            break;
    }
}

void exitATM() {
    printf("Exiting ATM...\n");
    // Add code to handle exiting the ATM
    exit(0);
}

// Function to validate the entered PIN and account number
bool validatePIN(int pin, int accountNumber) {
    int validPins[] = {1432, 1543}; // Change this to the desired valid PINs
    int validAccountNumbers[] = {1234, 5678}; // Change this to the desired valid account numbers
    int numValidAccountNumbers = sizeof(validAccountNumbers) / sizeof(validAccountNumbers[0]);

    for (int i = 0; i < numValidAccountNumbers; i++) {
        if (pin == validPins[i] && accountNumber == validAccountNumbers[i]) {
            return true;
        }
    }

    return false;
}

int main() {
    // Create the linked list of transactions
    Transaction* transactionList = NULL;
    addTransaction(&transactionList, "Cash Withdrawal", cashWithdrawal);
    addTransaction(&transactionList, "Cash Deposit", cashDeposit);
    addTransaction(&transactionList, "Fund Transfer", fundTransfer);
    addTransaction(&transactionList, "Account Services", accountServices);
    addTransaction(&transactionList, "Exit", exitATM);

    // Display the available transactions
    displayTransactions(transactionList);

    // Prompt for account number and PIN
    int attempts = 0;
    bool authenticated = false;
    while (attempts < MAX_ATTEMPTS) {
        int accountNumber, pin;
        printf("Enter your account number: ");
        scanf("%d", &accountNumber);
        printf("Enter your PIN: ");
        scanf("%d", &pin);
        attempts++;

        if (validatePIN(pin, accountNumber)) {
            authenticated = true;
            break;
        } else {
            printf("Invalid account number or PIN. Please try again.\n");
        }
    }

    if (!authenticated) {
        printf("Maximum PIN attempts exceeded. Exiting...\n");
        return 0;
    }

    // Get user input and execute the selected transaction
    int choice;
    while (1) {
        printf("Enter transaction number: ");
        scanf("%d", &choice);
        if (choice >= 1 && choice <= 6) {
            Transaction* current = transactionList;
            for (int i = 1; i < choice; i++) {
                current = current->next;
            }
            current->transactionFunc();
        } else {
            printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

